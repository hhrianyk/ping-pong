import socket
import json
import threading
import time
import random

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –≥—Ä–∏
WIDTH, HEIGHT = 800, 600       # –†–æ–∑–º—ñ—Ä –ø–æ–ª—è
BALL_SPEED = 5                 # –ü–æ—á–∞—Ç–∫–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –º'—è—á–∞
PADDLE_SPEED = 10              # –®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä—É—Ö—É –ø–ª–∞—Ç—Ñ–æ—Ä–º
COUNTDOWN_START = 3            # –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –≤—ñ–¥–ª—ñ–∫ –ø–µ—Ä–µ–¥ –≥—Ä–æ—é


class GameServer:
    def __init__(self, host='localhost', port=8080):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤–µ—Ä–∞, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–æ–∫–µ—Ç–∞, –∑–º—ñ–Ω –≥—Ä–∏ —Ç–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è"""
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server.bind((host, port))
        self.server.listen(2)  # –û—á—ñ–∫—É—î–º–æ 2 –≥—Ä–∞–≤—Ü—ñ–≤
        print("üéÆ Server started")

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
        self.clients = {0: None, 1: None}       # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤
        self.connected = {0: False, 1: False}   # –°—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        self.lock = threading.Lock()            # –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ—Ç–æ–∫—ñ–≤

        self.reset_game_state()  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –≥—Ä–∏
        self.sound_event = None  # –î–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –∑–≤—É–∫–æ–≤–∏—Ö –ø–æ–¥—ñ–π –∫–ª—ñ—î–Ω—Ç–∞–º

    def reset_game_state(self):
        """–°–∫–∏–¥–∞—î –ø–æ–∑–∏—Ü—ñ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º, –º'—è—á–∞ —Ç–∞ —Ä–∞—Ö—É–Ω–æ–∫ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É"""
        self.paddles = {0: 250, 1: 250}  # –ü–æ–∑–∏—Ü—ñ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º (–ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—ñ)
        self.scores = [0, 0]             # –†–∞—Ö—É–Ω–æ–∫ –æ–±–æ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
        self.ball = {                    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º'—è—á–∞
            "x": WIDTH // 2,
            "y": HEIGHT // 2,
            "vx": BALL_SPEED * random.choice([-1, 1]),
            "vy": BALL_SPEED * random.choice([-1, 1])
        }
        self.countdown = COUNTDOWN_START  # –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –≤—ñ–¥–ª—ñ–∫ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
        self.game_over = False
        self.winner = None

    def handle_client(self, pid):
        """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥–∏ –≤—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è"""
        conn = self.clients[pid]
        try:
            while True:
                data = conn.recv(64).decode()  # –ß–∏—Ç–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É
                with self.lock:  # –ë–ª–æ–∫—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ —Å–ø—ñ–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
                    if data == "UP":
                        self.paddles[pid] = max(60, self.paddles[pid] - PADDLE_SPEED)
                    elif data == "DOWN":
                        self.paddles[pid] = min(HEIGHT - 100, self.paddles[pid] + PADDLE_SPEED)
        except:
            # –ü—Ä–∏ —Ä–æ–∑—Ä–∏–≤—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è ‚Äî –∫—ñ–Ω–µ—Ü—å –≥—Ä–∏
            with self.lock:
                self.connected[pid] = False
                self.game_over = True
                self.winner = 1 - pid
                print(f"–ì—Ä–∞–≤–µ—Ü—å {pid} –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è. –ü–µ—Ä–µ–º—ñ–≥ –≥—Ä–∞–≤–µ—Ü—å {1 - pid}.")

    def broadcast_state(self):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –≥—Ä–∏ –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º"""
        state = json.dumps({
            "paddles": self.paddles,
            "ball": self.ball,
            "scores": self.scores,
            "countdown": max(self.countdown, 0),
            "winner": self.winner if self.game_over else None,
            "sound_event": self.sound_event
        }) + "\n"
        for pid, conn in self.clients.items():
            if conn:
                try:
                    conn.sendall(state.encode())
                except:
                    self.connected[pid] = False

    def ball_logic(self):
        """–û–Ω–æ–≤–ª—é—î –ø–æ–ª–æ–∂–µ–Ω–Ω—è –º'—è—á–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è —Ç–∞ —Ä–∞—Ö—É–Ω–æ–∫"""
        # –ü–µ—Ä–µ–¥ –≥—Ä–æ—é ‚Äî –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –≤—ñ–¥–ª—ñ–∫
        while self.countdown > 0:
            time.sleep(1)
            with self.lock:
                self.countdown -= 1
                self.broadcast_state()

        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä—É—Ö—É –º'—è—á–∞
        while not self.game_over:
            with self.lock:
                # –†—É—Ö –º'—è—á–∞
                self.ball['x'] += self.ball['vx']
                self.ball['y'] += self.ball['vy']

                # –í—ñ–¥–±–∏—Ç—Ç—è –≤—ñ–¥ –≤–µ—Ä—Ö–Ω—å–æ—ó —Ç–∞ –Ω–∏–∂–Ω—å–æ—ó –º–µ–∂
                if self.ball['y'] <= 60 or self.ball['y'] >= HEIGHT:
                    self.ball['vy'] *= -1
                    self.sound_event = "wall_hit"

                # –í—ñ–¥–±–∏—Ç—Ç—è –≤—ñ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º
                if (self.ball['x'] <= 40 and self.paddles[0] <= self.ball['y'] <= self.paddles[0] + 100) or \
                   (self.ball['x'] >= WIDTH - 40 and self.paddles[1] <= self.ball['y'] <= self.paddles[1] + 100):
                    self.ball['vx'] *= -1
                    self.sound_event = 'platform_hit'

                # –ì–æ–ª–∏
                if self.ball['x'] < 0:
                    self.scores[1] += 1
                    self.reset_ball()
                elif self.ball['x'] > WIDTH:
                    self.scores[0] += 1
                    self.reset_ball()

                # –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å
                if self.scores[0] >= 10:
                    self.game_over = True
                    self.winner = 0
                elif self.scores[1] >= 10:
                    self.game_over = True
                    self.winner = 1

                self.broadcast_state()
                self.sound_event = None

            time.sleep(0.016)  # ~60 FPS

    def reset_ball(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –º'—è—á —É —Ü–µ–Ω—Ç—Ä –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º –Ω–∞–ø—Ä—è–º–∫–æ–º"""
        self.ball = {
            "x": WIDTH // 2,
            "y": HEIGHT // 2,
            "vx": BALL_SPEED * random.choice([-1, 1]),
            "vy": BALL_SPEED * random.choice([-1, 1])
        }

    def accept_players(self):
        """–ß–µ–∫–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–≤–æ—Ö –≥—Ä–∞–≤—Ü—ñ–≤ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –æ–±—Ä–æ–±–∫—É —ó—Ö –∫–æ–º–∞–Ω–¥"""
        for pid in [0, 1]:
            print(f"–û—á—ñ–∫—É—î–º–æ –≥—Ä–∞–≤—Ü—è {pid}...")
            conn, _ = self.server.accept()
            self.clients[pid] = conn
            conn.sendall((str(pid) + "\n").encode())  # –ù–∞–¥—Å–∏–ª–∞—î–º–æ ID –≥—Ä–∞–≤—Ü—è
            self.connected[pid] = True
            print(f"–ì—Ä–∞–≤–µ—Ü—å {pid} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è")
            threading.Thread(target=self.handle_client, args=(pid,), daemon=True).start()

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞—î –≥—Ä—É —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î —ó—ó –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"""
        while True:
            self.accept_players()
            self.reset_game_state()
            threading.Thread(target=self.ball_logic, daemon=True).start()

            while not self.game_over and all(self.connected.values()):
                time.sleep(0.1)

            print(f"–ì—Ä–∞–≤–µ—Ü—å {self.winner} –ø–µ—Ä–µ–º—ñ–≥!")
            time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ—é –≥—Ä–æ—é

            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å—Ç–∞—Ä—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
            for pid in [0, 1]:
                try:
                    self.clients[pid].close()
                except:
                    pass
                self.clients[pid] = None
                self.connected[pid] = False


# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
GameServer().run()
